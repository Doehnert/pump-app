// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using pump_api.Data;

#nullable disable

namespace pump_api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250709090917_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("pump_api.Models.Pump", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double>("CurrentPressure")
                        .HasColumnType("REAL");

                    b.Property<double>("FlowRate")
                        .HasColumnType("REAL");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<double>("MaxPressure")
                        .HasColumnType("REAL");

                    b.Property<double>("MinPressure")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double>("Offset")
                        .HasColumnType("REAL");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Pumps");
                });

            modelBuilder.Entity("pump_api.Models.PumpInspection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("FlowRateReading")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("InspectionDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("InspectorId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOperational")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<double>("PressureReading")
                        .HasColumnType("REAL");

                    b.Property<int>("PumpId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PumpId");

                    b.ToTable("PumpInspections");
                });

            modelBuilder.Entity("pump_api.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("pump_api.Models.Pump", b =>
                {
                    b.HasOne("pump_api.Models.User", "User")
                        .WithMany("Pumps")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("pump_api.Models.PumpInspection", b =>
                {
                    b.HasOne("pump_api.Models.User", "Inspector")
                        .WithMany("Inspections")
                        .HasForeignKey("InspectorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("pump_api.Models.Pump", "Pump")
                        .WithMany("Inspections")
                        .HasForeignKey("PumpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inspector");

                    b.Navigation("Pump");
                });

            modelBuilder.Entity("pump_api.Models.Pump", b =>
                {
                    b.Navigation("Inspections");
                });

            modelBuilder.Entity("pump_api.Models.User", b =>
                {
                    b.Navigation("Inspections");

                    b.Navigation("Pumps");
                });
#pragma warning restore 612, 618
        }
    }
}
